{
  "swagger": "2.0",
  "info": {
    "description": "Domio API",
    "version": "1.0.0",
    "title": "Swagger Domio",
    "termsOfService": "http://domio.org/terms/",
    "contact": {
      "url": "http://domio.in",
      "name": "Sergei Basharov",
      "email": "sergei@basharov.net"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "tags": [
    {
      "name": "user",
      "description": "Signup, login, update users"
    },
    {
      "name": "domain",
      "description": "Create, update and get info about domains",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "subscription",
      "description": "Subscribe to domain rentals",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "card",
      "description": "Add cards to customers for payments",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/subscriptions": {
      "get": {
        "tags": [
          "subscription"
        ],
        "summary": "Get user subscriptions",
        "description": "",
        "operationId": "getUserSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "subscription"
        ],
        "summary": "Subscribe to a plan",
        "description": "",
        "operationId": "addSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "plan",
            "description": "Subscription",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NewSubscription"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "tags": [
          "subscription"
        ],
        "summary": "Get a subscription",
        "description": "",
        "operationId": "getSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subscription id to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid sub value"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "subscription"
        ],
        "summary": "Update a subscription",
        "description": "",
        "operationId": "updateSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subscription id to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "plan",
            "description": "Subscription",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NewSubscription"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid sub value"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "subscription"
        ],
        "summary": "Unsubscribe from a domain",
        "description": "",
        "operationId": "deleteSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Subscription id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/cards": {
      "post": {
        "tags": [
          "card"
        ],
        "summary": "Create a new card for the customer",
        "description": "",
        "operationId": "addCard",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "name",
            "description": "Card",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NewCard"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      },
      "get": {
        "tags": [
          "card"
        ],
        "summary": "Get user cards",
        "description": "",
        "operationId": "listCards",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/cards/{id}": {
      "get": {
        "tags": [
          "card"
        ],
        "summary": "Get user card by its Stripe ID",
        "description": "",
        "operationId": "getCard",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Stripe ID of the card",
            "required": true,
            "type": "string"
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/domains": {
      "post": {
        "tags": [
          "domain"
        ],
        "summary": "Add a new domain to the store",
        "description": "",
        "operationId": "addDomain",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "domain",
            "description": "Domain object that needs to be added to the store",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NewDomain"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "domain"
        ],
        "summary": "Update an existing domain",
        "description": "",
        "operationId": "updatePet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Validation exception"
          },
          "404": {
            "description": "Pet not found"
          },
          "400": {
            "description": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/domains/available": {
      "get": {
        "tags": [
          "domain"
        ],
        "summary": "Get domains that are available for rent",
        "description": "Multiple status values can be provided with comma seperated strings",
        "operationId": "getAvailableDomains",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Domain"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/domains/rented": {
      "get": {
        "tags": [
          "domain"
        ],
        "summary": "Get domains that are currently rented",
        "description": "Multiple status values can be provided with comma seperated strings",
        "operationId": "getRentedDomains",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Domain"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/domains/user": {
      "get": {
        "tags": [
          "domain"
        ],
        "summary": "Get domains that are owned by the current authenticated user",
        "description": "Multiple status values can be provided with comma seperated strings",
        "operationId": "getOwnedDomains",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Domain"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/domains/findByTags": {
      "get": {
        "tags": [
          "domain"
        ],
        "summary": "Finds Domains by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "tags",
            "description": "Tags to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Domain"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/domains/{name}": {
      "get": {
        "tags": [
          "domain"
        ],
        "summary": "Find domain by name",
        "description": "Returns a domain with name provided",
        "operationId": "getDomainByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "ID of domain that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "Domain not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DomainInfo"
            }
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "domain"
        ],
        "summary": "Deletes a domain",
        "description": "",
        "operationId": "deleteDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Domain name to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/users": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "Method to create a new user on signup.",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUser"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          },
          "422": {
            "description": "User email already exists and can't be used for a new registration"
          }
        }
      }
    },
    "/user": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "Method to delete an existing user.",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          },
          "422": {
            "description": "User with this email doesn't exist"
          }
        },
        "security": [
          {
            "jwt_key": []
          }
        ]
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User email and password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthPair"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "description": "User with a legit JWT token is logged out successfully"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "User not found"
          },
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "name that need to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "User not found"
          },
          "400": {
            "description": "Invalid user supplied"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "jwt_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "User": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      }
    },
    "NewUser": {
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "john@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "john@gmail.com"
        }
      }
    },
    "AuthPair": {
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "example": "john@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "john@gmail.com"
        }
      }
    },
    "Domain": {
      "required": [
        "name",
        "price"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "john.com"
        },
        "price": {
          "type": "integer",
          "example": 2000
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "domain status in the store"
        }
      }
    },
    "ErrorResponse": {
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "example": 123
        },
        "message": {
          "type": "string",
          "example": "Some error happened"
        }
      }
    },
    "DomainInfo": {
      "required": [
        "name",
        "owner",
        "price"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "john.com"
        },
        "owner": {
          "type": "string",
          "example": "john.com"
        },
        "price": {
          "type": "integer",
          "example": 1000
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "domain status in the store"
        }
      }
    },
    "NewDomain": {
      "required": [
        "name",
        "price_per_month"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "john.com"
        },
        "price_per_month": {
          "type": "integer",
          "example": 1000
        }
      }
    },
    "NewCard": {
      "required": [
        "customer_name"
      ],
      "properties": {
        "customer_name": {
          "type": "string",
          "example": "John Doe"
        },
        "month": {
          "type": "integer",
          "format": "int64",
          "example": 12
        },
        "year": {
          "type": "integer",
          "format": "int64",
          "example": 2018
        },
        "cvc": {
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "example": 4242424242424242
        }
      }
    },
    "NewSubscription": {
      "required": [
        "domain"
      ],
      "properties": {
        "domain": {
          "type": "string",
          "example": "john.com"
        }
      }
    },
    "Subscription": {
      "required": [
        "domain"
      ],
      "properties": {
        "domain": {
          "type": "string",
          "example": "john.com"
        }
      }
    },
    "Tag": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    }
  }
}